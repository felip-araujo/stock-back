generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_profile {
  admin
  employee
}

model User {
  id            Int               @id @default(autoincrement())
  name          String
  email         String            @unique
  password      String
  role          Role              @default(EMPLOYEE)
  companyId     Int
  company       Company           @relation(fields: [companyId], references: [id])
  departmentId  Int?
  department    Department?       @relation(fields: [departmentId], references: [id])
  requests      MaterialRequest[] @relation("UserRequests")
  newRequests   Request[]         @relation("UserRequests")
  createdAt     DateTime          @default(now())
  PasswordReset PasswordReset[]
}

model Company {
  id           Int               @id @default(autoincrement())
  name         String            @unique
  cnpj         String            @unique
  representant String
  rep_email    String            @unique
  rep_num      String
  users        User[]
  products     Product[]
  materials    Material[]
  requests     MaterialRequest[] @relation("CompanyRequests")
  newRequests  Request[]         @relation("CompanyRequests")
  departments  Department[]
  subscription Subscription?
  createdAt    DateTime          @default(now())
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  companyId   Int
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
}

model Material {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  group       String?
  companyId   Int
  company     Company           @relation(fields: [companyId], references: [id])
  requests    MaterialRequest[] @relation("MaterialRequests")
  requestItems RequestItem[]    @relation("MaterialRequests")
  createdAt   DateTime          @default(now())
}

model Request {
  id         Int           @id @default(autoincrement())
  userId     Int
  user       User          @relation("UserRequests", fields: [userId], references: [id])
  companyId  Int
  company    Company       @relation("CompanyRequests", fields: [companyId], references: [id])
  status     String        @default("pending")
  items      RequestItem[]
  createdAt  DateTime      @default(now())
}

model RequestItem {
  id         Int      @id @default(autoincrement())
  requestId  Int
  request    Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  materialId Int
  material   Material @relation("MaterialRequests", fields: [materialId], references: [id])
  quantity   Int
  createdAt  DateTime @default(now())

  @@unique([requestId, materialId]) // Evita duplicatas de material na mesma requisição
}

model MaterialRequest {
  id         Int      @id @default(autoincrement())
  materialId Int
  material   Material @relation("MaterialRequests", fields: [materialId], references: [id])
  userId     Int
  user       User     @relation("UserRequests", fields: [userId], references: [id])
  companyId  Int
  company    Company  @relation("CompanyRequests", fields: [companyId], references: [id])
  quantity   Int
  status     String   @default("pending")
  createdAt  DateTime @default(now())
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Subscription {
  id                  Int      @id @default(autoincrement())
  companyId           Int      @unique
  company             Company  @relation(fields: [companyId], references: [id])
  stripeSubscriptionId String   @unique
  email               String
  status              String   // "active" ou "inactive"
}


model Department {
  id        Int      @id @default(autoincrement())
  name      String
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id])
  users     User[]
  createdAt DateTime @default(now())

  @@unique([name, companyId]) // Garante que nomes de departamentos sejam únicos por empresa
}

enum Role {
  SUPER_ADMIN // Administrador global
  COMPANY_ADMIN // Administrador da empresa
  EMPLOYEE // Funcionário
}


