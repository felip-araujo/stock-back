generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "foreignKeys"
}

model User {
  id            Int               @id @default(autoincrement())
  name          String
  email         String            @unique
  password      String
  role          Role              @default(EMPLOYEE)
  companyId     Int
  departmentId  Int?
  createdAt     DateTime          @default(now())
  requests      MaterialRequest[] @relation("UserRequests")
  PasswordReset PasswordReset[]
  newRequests   Request[]         @relation("UserRequests")
  company       Company           @relation(fields: [companyId], references: [id])
  department    Department?       @relation(fields: [departmentId], references: [id])
  sales         Sale[]

  @@index([companyId], map: "User_companyId_fkey")
  @@index([departmentId], map: "User_departmentId_fkey")
}

model Company {
  id           Int               @id @default(autoincrement())
  name         String            @unique
  cnpj         String            @unique
  representant String
  rep_email    String            @unique
  rep_num      String
  createdAt    DateTime          @default(now())
  departments  Department[]
  materials    Material[]
  requests     MaterialRequest[] @relation("CompanyRequests")
  products     Product[]
  newRequests  Request[]         @relation("CompanyRequests")
  subscription Subscription?
  users        User[]
  sales        Sale[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  codigo      String?
  price       Float
  stock       Int      @default(0)
  companyId   Int
  createdAt   DateTime @default(now())
  company     Company  @relation(fields: [companyId], references: [id])
  sales       Sale[]

  @@index([companyId], map: "Product_companyId_fkey")
}

model Material {
  id           Int               @id @default(autoincrement())
  name         String
  description  String?
  group        String?
  codigo       String?
  companyId    Int
  createdAt    DateTime          @default(now())
  company      Company           @relation(fields: [companyId], references: [id])
  requests     MaterialRequest[] @relation("MaterialRequests")
  requestItems RequestItem[]     @relation("MaterialRequests")

  @@index([companyId], map: "Material_companyId_fkey")
}

model Request {
  id        Int           @id @default(autoincrement())
  userId    Int
  companyId Int
  status    String        @default("pending")
  createdAt DateTime      @default(now())
  company   Company       @relation("CompanyRequests", fields: [companyId], references: [id])
  user      User          @relation("UserRequests", fields: [userId], references: [id])
  items     RequestItem[]

  @@index([companyId], map: "Request_companyId_fkey")
  @@index([userId], map: "Request_userId_fkey")
}

model RequestItem {
  id         Int      @id @default(autoincrement())
  requestId  Int
  materialId Int
  quantity   Int
  createdAt  DateTime @default(now())
  material   Material @relation("MaterialRequests", fields: [materialId], references: [id])
  request    Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@unique([requestId, materialId])
  @@index([materialId], map: "RequestItem_materialId_fkey")
}

model MaterialRequest {
  id         Int      @id @default(autoincrement())
  materialId Int
  userId     Int
  companyId  Int
  quantity   Int
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  company    Company  @relation("CompanyRequests", fields: [companyId], references: [id])
  material   Material @relation("MaterialRequests", fields: [materialId], references: [id])
  user       User     @relation("UserRequests", fields: [userId], references: [id])

  @@index([companyId], map: "MaterialRequest_companyId_fkey")
  @@index([materialId], map: "MaterialRequest_materialId_fkey")
  @@index([userId], map: "MaterialRequest_userId_fkey")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Subscription {
  id                   Int       @id @default(autoincrement())
  companyId            Int       @unique
  stripeSubscriptionId String    @unique
  email                String?
  status               String
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  updatedAt            DateTime  @updatedAt
  company              Company   @relation(fields: [companyId], references: [id])
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String
  companyId Int
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id])
  users     User[]

  @@unique([name, companyId])
  @@index([companyId], map: "Department_companyId_fkey")
}

model Sale {
  id           Int      @id @default(autoincrement())
  productId    Int
  userId       Int // quem registrou a venda
  companyId    Int // empresa vinculada Ã  venda
  buyerName    String
  buyerCpfCnpj String
  buyerEmail   String?
  buyerPhone   String?
  quantity     Int
  totalPrice   Float
  createdAt    DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

enum Role {
  SUPER_ADMIN
  COMPANY_ADMIN
  EMPLOYEE
}
